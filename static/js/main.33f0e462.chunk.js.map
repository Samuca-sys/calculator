{"version":3,"sources":["components/Display.js","components/Button.js","components/ButtonPannel.js","logic/operate.js","components/App.js","logic/calculate.js","logic/isNumber.js","index.js"],"names":["Display","className","this","props","value","React","Component","Button","handleOnClick","clickHandler","name","orange","join","trim","onClick","ButtonPanel","buttonName","operate","numberOne","numberTwo","operation","firstNumber","Big","secondNumber","plus","toString","minus","times","alert","div","mod","Error","App","setState","obj","total","next","test","result","includes","parseFloat","calculate","state","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33f0e462.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Display.css'\r\n\r\nexport default class Display extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className=\"component-display\">\r\n        <div>{this.props.value}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nDisplay.propTypes = {\r\n  value: PropTypes.string\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Button.css'\r\n\r\nexport default class Button extends React.Component {\r\n  handleOnClick = () => {\r\n    this.props.clickHandler(this.props.name);\r\n  }\r\n\r\n  render () {\r\n    const className = [\r\n      \"component-button\",\r\n      this.props.orange ? \"orange\" : \"\",\r\n    ]\r\n\r\n    return (\r\n      <div className={className.join(\" \").trim()}>\r\n        <button \r\n          onClick={this.handleOnClick}\r\n        >\r\n          {this.props.name}\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nButton.propTypes = {\r\n  name: PropTypes.string, //assign strint to props called name\r\n  orange: PropTypes.bool,\r\n  clickHandler: PropTypes.func\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from './Button';\r\n\r\nimport './ButtonPanel.css'\r\n\r\nexport default class ButtonPanel extends React.Component {\r\n  handleOnClick = (buttonName) => {\r\n    this.props.clickHandler(buttonName);\r\n  }\r\n  render () {\r\n    return (\r\n      <div className=\"component-button-panel\">\r\n        <div>\r\n          <Button name=\"AC\" clickHandler={this.handleOnClick}/>\r\n          <Button name=\"+/-\" clickHandler={this.handleOnClick}/>\r\n          <Button name=\"%\" clickHandler={this.handleOnClick}/>\r\n          <Button name=\"รท\" clickHandler={this.handleOnClick} orange/>\r\n        </div>\r\n        <div>\r\n          <Button name=\"7\" clickHandler={this.handleOnClick}/>\r\n          <Button name=\"8\" clickHandler={this.handleOnClick}/>\r\n          <Button name=\"9\" clickHandler={this.handleOnClick}/>\r\n          <Button name=\"x\" clickHandler={this.handleOnClick} orange/>\r\n        </div>\r\n        <div>\r\n          <Button name=\"4\" clickHandler={this.handleOnClick}/>\r\n          <Button name=\"5\" clickHandler={this.handleOnClick}/>\r\n          <Button name=\"6\" clickHandler={this.handleOnClick}/>\r\n          <Button name=\"-\" clickHandler={this.handleOnClick} orange/>\r\n        </div>\r\n        <div>\r\n          <Button name=\"1\" clickHandler={this.handleOnClick}/>\r\n          <Button name=\"2\" clickHandler={this.handleOnClick}/>\r\n          <Button name=\"3\" clickHandler={this.handleOnClick}/>\r\n          <Button name=\"+\" clickHandler={this.handleOnClick} orange/>\r\n        </div>\r\n        <div>\r\n          <Button name=\"0\" clickHandler={this.handleOnClick}/>\r\n          <Button name=\".\" clickHandler={this.handleOnClick}/>\r\n          <Button name=\"MOD\" clickHandler={this.handleOnClick} orange/>\r\n          <Button name=\"=\" clickHandler={this.handleOnClick} orange/>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nButtonPanel.propTypes = {\r\n  clickHandler: PropTypes.func\r\n}","import Big from 'big.js'\r\n\r\nexport default function operate(numberOne, numberTwo, operation) {\r\n  const firstNumber = Big(numberOne || '0')\r\n  const secondNumber = Big(\r\n    numberTwo || (operation === 'รท' || operation === 'x' ? '1' : '0')\r\n  )//If division or multiplication, then mantain current value in case of null\r\n\r\n  switch (operation){\r\n    case '+':\r\n      return firstNumber.plus(secondNumber).toString();\r\n    case '-':\r\n      return firstNumber.minus(secondNumber).toString();\r\n    case 'x':\r\n      return firstNumber.times(secondNumber).toString();\r\n    case 'รท':\r\n      if(secondNumber === '0') {\r\n        alert('Divided by zero error');\r\n        return '0'\r\n      } else {\r\n        return firstNumber.div(secondNumber).toString();\r\n      }\r\n    case 'MOD':\r\n      return firstNumber.mod(secondNumber).toString();\r\n    default:\r\n      throw Error(`Unknown operation '${operation}'`);\r\n  }\r\n}","import React from 'react';\r\n\r\nimport Display from \"./Display\";\r\nimport ButtonPanel from \"./ButtonPannel\";\r\n\r\nimport calculate from \"../logic/calculate\";\r\n\r\nimport './App.css'\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      total: null,\r\n      next: null,\r\n      operation: null\r\n    }\r\n  }\r\n\r\n  handleOnClick = (buttonName) => {\r\n    this.setState(calculate(this.state, buttonName));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"component-app\">\r\n        <Display  \r\n          value={this.state.next || this.state.total|| '0'}\r\n        />\r\n        <ButtonPanel clickHandler={this.handleOnClick}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Big from 'big.js';\r\n\r\nimport operate from './operate';\r\nimport isNumber from './isNumber';\r\n\r\n\r\n/**\r\n * Given a button name and a calculator data object, return an updated\r\n * calculator data object.\r\n * \r\n * Calcaulator dataobject contains:\r\n *  total:String        the runnning total\r\n *  next:String         the next number to be operated on with the total\r\n *  operation:String    +,-,etc.\r\n */ \r\n\r\nexport default function calculate(obj, buttonName) {\r\n  if(buttonName === 'AC') {\r\n    return {\r\n      total: null,\r\n      next: null,\r\n      operation: null\r\n    }\r\n  }\r\n\r\n  if(isNumber(buttonName)) {\r\n    if(buttonName === '0' && obj.next === '0'){\r\n      return {}\r\n    }\r\n\r\n    //If there is an operation, update next\r\n    if(obj.operation) {\r\n      if(obj.next) {\r\n        return {next: obj.next + buttonName}\r\n      }\r\n      return {next: buttonName}\r\n    }\r\n  \r\n    //If there is no operation, update next and clear the value\r\n    if(obj.next){\r\n      const next = obj.next === '0' ? buttonName : obj.next + buttonName\r\n      return {\r\n        next,\r\n        total: null\r\n      }\r\n    } \r\n    return {\r\n      next: buttonName,\r\n      total: null,\r\n    }\r\n  }\r\n\r\n  if(buttonName === '%') {\r\n    if(obj.operation && obj.next) {\r\n      const result = operate(obj.total, obj.next, obj.operation)\r\n      return {\r\n        total: Big(result).div(Big('100')).toString(),\r\n        next: null,\r\n        operation: null,\r\n      }\r\n    }\r\n    if(obj.next) {\r\n      return {\r\n        next: Big(obj.next).div(Big('100')).toString(),\r\n      }\r\n    }\r\n    return {}\r\n  }\r\n\r\n\r\n  if(buttonName === '.') {\r\n    if(obj.next) {\r\n      //ignore a '.' if the next number already has one\r\n      if(obj.next.includes('.')){\r\n        return {}\r\n      }\r\n      return { next: obj.next + '.'};\r\n    }\r\n    return {total: '0.'}\r\n  }\r\n\r\n  if(buttonName === '='){\r\n    if(obj.next && obj.operation) {\r\n      return {\r\n        total: operate(obj.total, obj.next, obj.operation),\r\n        next: null,\r\n        operation: null,\r\n      }  \r\n    } else {\r\n      // '=' with no operation, nothing to do\r\n      return {};\r\n    }\r\n  }\r\n\r\n  if(buttonName === '+/-') {\r\n    if(obj.next) {\r\n      return {next: (-1 * parseFloat(obj.next)).toString()};\r\n    }\r\n    if(obj.total) {\r\n      return {total: (-1 * parseFloat(obj.total)).toString()};\r\n    }\r\n    return {}\r\n  }\r\n  \r\n  // User pressed an operation button and there is an existing operation\r\n  if(obj.operation) {\r\n    return {\r\n      total: operate(obj.total, obj.next, obj.operation),\r\n      next: null,\r\n      operation: buttonName,\r\n    }\r\n  }\r\n\r\n  // no operation yet, but the user typed one\r\n\r\n  // The user hasn't typed yet, just save the operation\r\n  if(!obj.next) {\r\n    return { operation: buttonName};\r\n  }\r\n\r\n  //save the operation and shift 'next' into 'total'\r\n  return { \r\n    total: obj.next, \r\n    next: null,\r\n    operation: buttonName\r\n  }\r\n}\r\n","export default function isNumber(item){\r\n  //search for a match between a regular expression and a specified string\r\n  return /[0-9]+/.test(item);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}